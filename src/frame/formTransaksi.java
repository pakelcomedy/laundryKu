/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frame;

import com.mysql.cj.protocol.Resultset;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.security.Timestamp;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static koneksi.koneksi.configDB;

/**
 *
 * @author sartriaardianthauno
 */
public class formTransaksi extends javax.swing.JFrame {
    private int idEdit;

    // Other code in your formTransaksi class...

    // Constructor with idEdit parameter
   public formTransaksi(int idEdit) {
       
        
        this.idEdit = idEdit;
//        System.out.println("idEdit transaksi: "+this.idEdit);
        initComponents(); // Call initComponents after setting idEdit
        getEditIdData(this.idEdit);
        System.out.println("idEdit: "+idEdit);
        
        populateProdukSelectBox();
//        populatedCmbMember();        
        
        // set not edible
        cmb_member.setEditable(false);
        txt_pelanggan.setEditable(false);
        txt_hp.setEditable(false);
        
        txt_pelanggan.setBackground(new Color(224, 218, 218));
        txt_hp.setBackground(new Color(224, 218, 218));
        cmb_member.setBackground(new Color(224, 218, 218));
        
        jLabel11.setText("Edit Transaksi");
    }
    
    /**
     * Creates new form formTransaksis
     */
    public formTransaksi() {
        initComponents();
        
        txt_totalHarga.setEditable(false);
        txt_grandTotal.setEditable(false);
        txt_biaya_tambahan2.setEditable(false);
        txt_diskon2.setEditable(false);
        txt_totalPembayaran.setEditable(false);
        txt_kembalian.setEditable(false);
        txt_harga.setEditable(false);
        cmb_jenis.setEditable(false);
        
        jLabel11.setText("Tambah Transaksi");
        
        populateProdukSelectBox();
        populatedCmbMember();
         
//        System.out.println("ID Produk: " + this.getIdProduk());
//        System.out.println("Nama Produk: " + getNamaProduk());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_hp = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_kembalian = new javax.swing.JTextField();
        txt_pembayaran = new javax.swing.JTextField();
        txt_totalPembayaran = new javax.swing.JTextField();
        txt_biaya_tambahan2 = new javax.swing.JTextField();
        txt_grandTotal = new javax.swing.JTextField();
        btn_kembali = new javax.swing.JButton();
        btn_simpan = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        cmb_statusLaundry = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        cmb_tunai = new javax.swing.JComboBox<>();
        txt_pelanggan = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        cmb_statusPembayaran = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_alamat = new javax.swing.JTextArea();
        cmb_produk = new javax.swing.JComboBox<>();
        cmb_jenis = new javax.swing.JComboBox<>();
        txt_jumlah = new javax.swing.JTextField();
        txt_harga = new javax.swing.JTextField();
        txt_diskon = new javax.swing.JTextField();
        txt_biaya_tambahan = new javax.swing.JTextField();
        txt_totalHarga = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        modelTable = new javax.swing.JTable();
        btn_delete_detail = new javax.swing.JButton();
        btn_tambahTable = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_batasWaktu = new javax.swing.JSpinner();
        cmb_member = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txt_diskon2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        ck_pengiriman = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel20.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel20.setText("Nama Pelanggan");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Produk");

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setText("Jenis Produk");

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Jumlah");

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Harga");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Member");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("No Hp");

        txt_hp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txt_hp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_hpActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Diskon");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Biaya Tambahan");

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Total Harga");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Grand Total");

        jLabel28.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel28.setText("Biaya Tambahan");

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setText("Diskon");

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Total Pembayaran ");

        txt_kembalian.setBackground(new java.awt.Color(224, 218, 218));
        txt_kembalian.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_kembalian.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_kembalian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_kembalianActionPerformed(evt);
            }
        });

        txt_pembayaran.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_pembayaran.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_pembayaran.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_pembayaranFocusLost(evt);
            }
        });
        txt_pembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pembayaranActionPerformed(evt);
            }
        });

        txt_totalPembayaran.setBackground(new java.awt.Color(224, 218, 218));
        txt_totalPembayaran.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_totalPembayaran.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_totalPembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalPembayaranActionPerformed(evt);
            }
        });

        txt_biaya_tambahan2.setBackground(new java.awt.Color(224, 218, 218));
        txt_biaya_tambahan2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_biaya_tambahan2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_biaya_tambahan2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_biaya_tambahan2ActionPerformed(evt);
            }
        });

        txt_grandTotal.setBackground(new java.awt.Color(224, 218, 218));
        txt_grandTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_grandTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_grandTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_grandTotalActionPerformed(evt);
            }
        });

        btn_kembali.setBackground(new java.awt.Color(153, 153, 0));
        btn_kembali.setForeground(new java.awt.Color(255, 255, 255));
        btn_kembali.setText("Kembali");
        btn_kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kembaliActionPerformed(evt);
            }
        });

        btn_simpan.setBackground(new java.awt.Color(0, 102, 51));
        btn_simpan.setForeground(new java.awt.Color(255, 255, 255));
        btn_simpan.setText("Simpan");
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel23.setText("Alamat Pengiriman");

        cmb_statusLaundry.setBackground(new java.awt.Color(224, 218, 218));
        cmb_statusLaundry.setMaximumRowCount(0);
        cmb_statusLaundry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baru", "Prosses", "Penjadawalan", "Selesai", "Sudah Lewat", " " }));
        cmb_statusLaundry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_statusLaundryActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel24.setText("Status  Laundry");

        jLabel22.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel22.setText("Dibayar Secara");

        cmb_tunai.setBackground(new java.awt.Color(224, 218, 218));
        cmb_tunai.setMaximumRowCount(0);
        cmb_tunai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tunai", "Non Tunai" }));
        cmb_tunai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_tunaiActionPerformed(evt);
            }
        });

        txt_pelanggan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txt_pelanggan.setMargin(new java.awt.Insets(10, 60, 20, 20));
        txt_pelanggan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pelangganActionPerformed(evt);
            }
        });

        jLabel30.setText("Pembayaran");

        jLabel31.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel31.setText("Status Pembayraan");

        cmb_statusPembayaran.setBackground(new java.awt.Color(224, 218, 218));
        cmb_statusPembayaran.setMaximumRowCount(0);
        cmb_statusPembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sudah Dibayar", "Belum Dibayar", " " }));
        cmb_statusPembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_statusPembayaranActionPerformed(evt);
            }
        });

        txt_alamat.setColumns(20);
        txt_alamat.setRows(5);
        jScrollPane1.setViewportView(txt_alamat);

        cmb_produk.setBackground(new java.awt.Color(224, 218, 218));
        cmb_produk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- pilih produk --" }));
        cmb_produk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_produkActionPerformed(evt);
            }
        });

        cmb_jenis.setBackground(new java.awt.Color(224, 218, 218));
        cmb_jenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_jenisActionPerformed(evt);
            }
        });

        txt_jumlah.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_jumlah.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_jumlah.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_jumlahFocusLost(evt);
            }
        });
        txt_jumlah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_jumlahActionPerformed(evt);
            }
        });

        txt_harga.setBackground(new java.awt.Color(224, 218, 218));
        txt_harga.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_harga.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_harga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_hargaActionPerformed(evt);
            }
        });

        txt_diskon.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_diskon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_diskon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_diskonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_diskonFocusLost(evt);
            }
        });
        txt_diskon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_diskonActionPerformed(evt);
            }
        });

        txt_biaya_tambahan.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_biaya_tambahan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_biaya_tambahan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_biaya_tambahanFocusLost(evt);
            }
        });
        txt_biaya_tambahan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_biaya_tambahanActionPerformed(evt);
            }
        });

        txt_totalHarga.setBackground(new java.awt.Color(224, 218, 218));
        txt_totalHarga.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_totalHarga.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_totalHarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalHargaActionPerformed(evt);
            }
        });

        modelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "no", "Produk", "Jenis", "Jumlah", "Harga", "Tambahan", "Diskon", "Total Harga"
            }
        ));
        jScrollPane2.setViewportView(modelTable);

        btn_delete_detail.setBackground(new java.awt.Color(255, 51, 51));
        btn_delete_detail.setForeground(new java.awt.Color(255, 255, 255));
        btn_delete_detail.setText("Delete");
        btn_delete_detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete_detailActionPerformed(evt);
            }
        });

        btn_tambahTable.setBackground(new java.awt.Color(51, 51, 255));
        btn_tambahTable.setForeground(new java.awt.Color(255, 255, 255));
        btn_tambahTable.setText("Tambah");
        btn_tambahTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tambahTableActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(5, 57, 107));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Detail Total Transaksi");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(150, 150, 150))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(5, 57, 107));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Detail Produk");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel6)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(5, 57, 107));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Detail Pelangan");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(160, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(146, 146, 146))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel4.setText("Batas waktu");

        txt_batasWaktu.setModel(new javax.swing.SpinnerDateModel());

        cmb_member.setBackground(new java.awt.Color(224, 218, 218));
        cmb_member.setMaximumRowCount(0);
        cmb_member.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Pilih Member --" }));
        cmb_member.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_memberActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(5, 57, 107));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Detail Pembayaran");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(150, 150, 150))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel32.setText("Kembalian");

        txt_diskon2.setBackground(new java.awt.Color(224, 218, 218));
        txt_diskon2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_diskon2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        txt_diskon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_diskon2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(5, 57, 107));

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("FORM TRANSAKSI");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(475, 475, 475)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        ck_pengiriman.setText("Lakukan Pengantaran");
        ck_pengiriman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ck_pengirimanActionPerformed(evt);
            }
        });

        jLabel18.setText("Status Pengiriman");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmb_produk, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmb_jenis, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_jumlah)
                            .addComponent(txt_harga, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_biaya_tambahan, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_tambahTable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_delete_detail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(txt_diskon, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_totalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(txt_hp, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmb_member, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_pelanggan, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel30)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(34, 34, 34)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_biaya_tambahan2)
                                .addComponent(txt_grandTotal)
                                .addComponent(txt_diskon2)
                                .addComponent(txt_totalPembayaran, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txt_kembalian, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txt_pembayaran, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel23)
                                .addComponent(jLabel24)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel31)
                                .addComponent(jLabel4)
                                .addComponent(jLabel18))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ck_pengiriman)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btn_kembali, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cmb_statusLaundry, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1)
                                    .addComponent(cmb_statusPembayaran, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_tunai, javax.swing.GroupLayout.Alignment.LEADING, 0, 292, Short.MAX_VALUE)
                                    .addComponent(txt_batasWaktu))))))
                .addGap(20, 20, 20))
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb_member, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_pelanggan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_hp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb_produk, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_jenis, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_jumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_harga, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_biaya_tambahan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_diskon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_totalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_tambahTable)
                            .addComponent(btn_delete_detail)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_grandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_biaya_tambahan2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txt_diskon2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_totalPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(txt_pembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(txt_kembalian, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_tunai, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_statusPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_statusLaundry, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_batasWaktu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ck_pengiriman)
                            .addComponent(jLabel18))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_simpan)
                            .addComponent(btn_kembali))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_hpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_hpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_hpActionPerformed

    private void txt_kembalianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_kembalianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_kembalianActionPerformed

    private void txt_pembayaranFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_pembayaranFocusLost
        // TODO add your handling code here:
//        String diskonText = txt_diskon.getText().trim();
        
//        Pemba = diskonText.isEmpty() ? 0 : Integer.parseInt(txt_pembayaran.getText().trim());
//        if(idEdit != 0 ) {
//            int pembayaran = Integer.parseInt(txt_pembayaran.getText().trim());
//            int TotalPembayaran = Integer.parseInt(txt_totalPembayaran.getText().trim());
//            
//            int kembalian = pembayaran - TotalPembayaran ;
//            System.out.println("kembalian: "+kembalian);
//                    
//            txt_kembalian.setText(String.valueOf(kembalian));
//        } else {
//            int pembayaran = Integer.parseInt(txt_pembayaran.getText().trim());
////            int kembalian = Kembalian + pembayaran;
//
//            int kembalian = Pembayaran - TotalPembayaran ;
//            int kembalian2 = kembalian + pembayaran;
//            txt_kembalian.setText(String.valueOf(kembalian2));
//        }
        try {
    // Assuming Pembayaran and TotalPembayaran are properly initialized somewhere in your code
//   int pembayaran = Integer.parseInt(txt_pembayaran.getText().trim());
            int TotalPembayaran = Integer.parseInt(txt_totalPembayaran.getText().trim());

    String pembayaranText = txt_pembayaran.getText().trim();

    if (!pembayaranText.isEmpty()) {
        int pembayaran = Integer.parseInt(pembayaranText);
        int kembalian = pembayaran - TotalPembayaran ;

        if (idEdit != 0) {
            kembalian = pembayaran - TotalPembayaran;
            System.out.println("kembalian: " + kembalian);
        } else {
            kembalian = Pembayaran - TotalPembayaran + pembayaran;
        }

        txt_kembalian.setText(String.valueOf(kembalian));
    } else {
        // Handle the case when the text is empty
        System.out.println("Pembayaran text is empty");
        // You might want to show an error message to the user or take appropriate action.
    }
} catch (NumberFormatException e) {
    // Handle the exception, for example, show an error message to the user.
    e.printStackTrace();
}

    }//GEN-LAST:event_txt_pembayaranFocusLost

    private void txt_pembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pembayaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pembayaranActionPerformed

    private void txt_totalPembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalPembayaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalPembayaranActionPerformed

    private void txt_biaya_tambahan2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_biaya_tambahan2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_biaya_tambahan2ActionPerformed

    private void txt_grandTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_grandTotalActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txt_grandTotalActionPerformed

    private void btn_kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kembaliActionPerformed
    // TODO add your handling code here:
    GrandTotal = 0;
    TotalPembayaran = 0;
    Kembalian = 0;
    Pembayaran = 0;
    TotalGrandTotal = 0;
    TotalBiayaTambahan = 0;
    TotalDiskon = 0;
        
    dispose();
    }//GEN-LAST:event_btn_kembaliActionPerformed

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
    // TODO add your handling code here:    
    try {
        Integer idEdit = this.idEdit;
        
        // Pellangan         
        String hp =txt_hp.getText();
        String selectedMember = cmb_member.getSelectedItem().toString();
        Integer selectedIdMember = memberMap.get(selectedMember);

        String sql;
        if (idEdit != 0) {
            // Update 
            System.out.println("edit pelanggan none");
        } else {
            // Insert
            sql = "INSERT INTO pelanggan (nama, no_hp) VALUES (?, ?)";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, txt_pelanggan.getText());
            pst.setString(2, hp);

            pst.executeUpdate();
        }
        
        java.sql.Connection conn = (Connection) koneksi.configDB();
        //  get ID pelanggan
        java.sql.Statement state = conn.createStatement();
        
        LocalDate localDate = LocalDate.now();

        // Convert to java.sql.Date
        java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);

        Date utilDate1 = (Date) txt_batasWaktu.getValue();

        // To get the date only from utilDate1, you can use the following line of code:

        String dateOnly = new SimpleDateFormat("yyyy-MM-dd").format(utilDate1);

        // If you want to convert this string back to a java.sql.Date object, you can use the following line of code:

        java.sql.Date sqlDate1 = java.sql.Date.valueOf(dateOnly);
        
        // pembayaran & kembalian
        int pembayaraan = Integer.parseInt(txt_pembayaran.getText().trim());
        int totalPembayaraan = Integer.parseInt(txt_totalPembayaran.getText().trim());
            
        int kembaliaan = pembayaraan - totalPembayaraan ;
        int defaultStatusLaundry = 0;
        
//        System.out.println("pembayaran: "+pembayaran);
//        System.out.println("kembalian: "+kembaliaan);
        
        int statusPengiriman = 0;
        if(ck_pengiriman.isSelected()){
           statusPengiriman = 1;
        }
        
        String getUID;
        ResultSet res;
        if (idEdit != 0) {
           getUID = "SELECT id_pelanggan FROM transaksi WHERE no_transaksi = "+ idEdit;
//            res = state.executeQuery(getUID);
        } else {
           getUID = "SELECT id_pelanggan FROM pelanggan ORDER BY id_pelanggan DESC LIMIT 1";
//           res = state.executeQuery(getUID);
        }
       
        res = state.executeQuery(getUID);
        
        int selectedIndex = cmb_statusLaundry.getSelectedIndex();
                int statusLaundry;
                if (selectedIndex == 0) {
                    statusLaundry = 0;
                } else if (selectedIndex == 1) {
                    statusLaundry = 1;
                } else if (selectedIndex == 2) {
                    statusLaundry = 2;
                } else if (selectedIndex == 3) {
                    statusLaundry = 3;
                } else if (selectedIndex == 4) {
                    statusLaundry = 5;
                } else {
                    statusLaundry = 5;
                }
         
        try {
            if(res.next()){               
                System.out.println("res running");
                 int idPelanggan;
                if (idEdit != 0) {
                    idPelanggan= res.getInt("id_pelanggan");
                    System.out.println("idPelanggan: "+idPelanggan);
                    System.out.println("Debug: " + idPelanggan); 
                } else {
                    idPelanggan = res.getInt("id_pelanggan");
                }             
                res.close();

                // Build and execute the transaksi insertion query
                String sql1;
                if (idEdit != 0) {
                    // update
                    sql1 = "UPDATE transaksi SET tgl_transaksi=?, id_pelanggan=?, id_pegawai=?, dibayar_secara=?, status_laundry=?, status_pembayaran=?, grandTotal=?, biayaTambahan=?, diskon=?, totalPembayaran=?, pembayaran=?, kembalian=?,statusPengiriman=?, tanggal_masuk=?, batas_waktu=?, alamat_pengiriman=? WHERE no_transaksi=?";
                } else {
                    // Insert
                    sql1 = "INSERT INTO transaksi (tgl_transaksi, id_pelanggan, id_pegawai, dibayar_secara, status_laundry, status_pembayaran, grandTotal, biayaTambahan, diskon, totalPembayaran, pembayaran, kembalian, statusPengiriman, tanggal_masuk, batas_waktu, alamat_pengiriman) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                }

                PreparedStatement pst1 = conn.prepareStatement(sql1);
                pst1.setDate(1, new java.sql.Date(System.currentTimeMillis()));
                pst1.setInt(2, idPelanggan);  // id_pelanggan
                pst1.setString(3, String.valueOf(Login.userId));  // value for id_pegawai
                pst1.setString(4, String.valueOf(cmb_tunai.getSelectedItem()));  //  dibayar_secara
      
                if (idEdit != 0) { //status laundry
                   pst1.setInt(5, statusLaundry);
                } else {
                    pst1.setInt(5, statusLaundry);
                }

                pst1.setString(6, String.valueOf(cmb_statusPembayaran.getSelectedItem()));   // status_pembayaran
                pst1.setInt(7, TotalGrandTotal);
                pst1.setInt(8, TotalBiayaTambahan);
                pst1.setInt(9, diskon);
                pst1.setInt(10, TotalPembayaran);
                pst1.setInt(11, pembayaraan); // bayaran
    //            pst1.setInt(12, Integer.parseInt(txt_kembalian.getText().trim())); // kembalian
                pst1.setInt(12, kembaliaan); // kembalian
                pst1.setInt(13,statusPengiriman);
                pst1.setDate(14, sqlDate);  //  tanggal_masuk
                pst1.setDate(15, sqlDate1);  //  batas_waktu
                pst1.setString(16, String.valueOf(txt_alamat.getText()));  // alamat_pengiriman

                if (idEdit != 0) {
                    pst1.setInt(17, idEdit);
                }

                pst1.executeUpdate();

                String getUIDT;
                ResultSet res1;

                if (idEdit != 0) {
                    // If in edit mode, use the provided idEdit to retrieve the corresponding no_transaksi
                    getUIDT = "SELECT no_transaksi FROM transaksi WHERE no_transaksi = ?";
                    pst1 = conn.prepareStatement(getUIDT);
                    pst1.setInt(1, idEdit);
                    res1 = pst1.executeQuery();
                } else {
                    // If not in edit mode, get the last no_transaksi
                    getUIDT = "SELECT no_transaksi FROM transaksi ORDER BY no_transaksi DESC LIMIT 1";
                    pst1 = conn.prepareStatement(getUIDT);
                    res1 = pst1.executeQuery();
                }

                String idT = null;  

                if (res1.next()) {
                    idT = res1.getString("no_transaksi");
                    res1.close();
                    System.out.println("res1 running");
    //                System.out.println("idT: "+idT);
    //                System.out.println("Data Size: " + data.size());
                    for (Vector<Object> row : data) {
                        int detailId = (int) row.get(0);
                        String namaProduk = (String) row.get(1);
                        String jenisProduk = (String) row.get(2);
                        int jumlah = (int) row.get(3);
                        int harga = (int) row.get(4);
                        int biayaTambahan = (int) row.get(5);
                        int diskon = (int) row.get(6);
                        int totalHarga = (int) row.get(7);
    //                    System.out.println("detailId: "+detailId);
    //                    System.out.println("jumlah: "+jumlah);
    //                    System.out.println("harga: "+harga);
    //                    System.out.println("biayaTambahan: "+biayaTambahan);
    //                    System.out.println("diskon: "+diskon);
    //                    System.out.println("totalHarga: "+totalHarga);

    //                    System.out.println("for Vector running");

                        try {
                            System.out.println("try catch running");

                            int id_produk = retrieveProdukId(namaProduk);

                            String checkQuery = "SELECT COUNT(*) FROM detail_transaksi WHERE detailId = ? AND no_transaksi = ?";
                                PreparedStatement checkPst = conn.prepareStatement(checkQuery);
                                checkPst.setInt(1, detailId);
                                checkPst.setInt(2, idEdit);
                                ResultSet resultSet = checkPst.executeQuery();

                                resultSet.next();
                                int rowCount = resultSet.getInt(1);

                            if (rowCount > 0) {
                                // detailId already exists, update the existing row
                                String updateQuery = "UPDATE detail_transaksi SET id_produk = ?, jumlah = ?, harga = ?, biayaTambahan = ?, diskon = ?, totalHarga = ? " +
                                                     "WHERE detailId = ?";
                                PreparedStatement updatePst = conn.prepareStatement(updateQuery);

                                updatePst.setInt(1, id_produk); 
                                updatePst.setInt(2, jumlah);
                                updatePst.setInt(3, harga);
                                updatePst.setInt(4, biayaTambahan);
                                updatePst.setInt(5, diskon);
                                updatePst.setInt(6, totalHarga);
                                updatePst.setInt(7, detailId);

                                updatePst.executeUpdate();
                            } else {
                                String sqlQuery = "INSERT INTO detail_transaksi (no_transaksi, detailId, id_produk, jumlah, harga, biayaTambahan, diskon, totalHarga) " +
                                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

                                PreparedStatement pst3 = conn.prepareStatement(sqlQuery);

                                pst3.setString(1, idT);  
                                pst3.setInt(2, detailId);  
                                pst3.setInt(3, id_produk); 
                                pst3.setInt(4, jumlah);
                                pst3.setInt(5, harga);
                                pst3.setInt(6, biayaTambahan);
                                pst3.setInt(7, diskon);
                                pst3.setInt(8, totalHarga);
                                pst3.executeUpdate();
                            }

                            System.out.println("idT: "+getUIDT);
                            System.out.println("id_produk: " +id_produk);
                            System.out.println("jenisProduk: "+jenisProduk);
                            System.out.println("jumlah: "+jumlah);
                            System.out.println("harga: "+harga);
                            System.out.println("biayaTambahan: "+biayaTambahan);
                            System.out.println("diskon: "+diskon);
                            System.out.println("totalHarga: "+totalHarga);

                        } catch (Exception e) {
    //                        JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }

                    // get no_transaksi
                    String upUIDT;
                    if (idEdit != 0) {
                        upUIDT = String.valueOf(idEdit);
                    } else {
                        upUIDT = "SELECT no_transaksi FROM transaksi ORDER BY no_transaksi DESC LIMIT 1";
                    }

                    try (ResultSet res2 = idEdit != 0 ? state.executeQuery("SELECT no_transaksi FROM transaksi WHERE no_transaksi = " + idEdit) : state.executeQuery(upUIDT)) {
                        if (res2.next()) {
                            System.out.println("Running res 2 Test");

                            String sql3 = "UPDATE transaksi SET grandTotal=?, biayaTambahan=?, diskon=?, totalPembayaran=?, pembayaran=?, kembalian=?" +
                                          " WHERE no_transaksi = ?";

                            try (PreparedStatement pst3 = conn.prepareStatement(sql3)) {
                                pst3.setInt(1, TotalGrandTotal);
                                pst3.setInt(2, TotalBiayaTambahan);
                                pst3.setInt(3, diskon);
                                pst3.setInt(4, TotalPembayaran);
                                pst3.setInt(5, pembayaraan);
                                pst3.setInt(6, kembaliaan);

                                // Set the no_transaksi value based on the retrieved value from the SELECT query
                                pst3.setInt(7, res2.getInt("no_transaksi"));

                                int rowsAffected = pst3.executeUpdate();

                                if (rowsAffected > 0) {
                                    System.out.println("Update successful");
                                } else {
                                    System.out.println("Update failed");
                                }
                           } catch (Exception e) {
                               e.printStackTrace();
                               System.out.println("e: "+e);
                           }
                       }
                   } catch (Exception e) {
                       e.printStackTrace();
                       System.out.println("e: "+e);
                   }
                }
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Transaksi Berhasil");
            }  
        } catch (Exception e ) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            System.out.println("e: "+e);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage());
        System.out.println("e: "+e);
    }
    }//GEN-LAST:event_btn_simpanActionPerformed
  
    
    
private int retrieveProdukId(String namaProduk) {
    for (Map.Entry<String, ProdukInfo> entry : produkMap.entrySet()) {
        ProdukInfo produkInfo = entry.getValue();
        if (produkInfo.getNamaProduk().equals(namaProduk)) {
            return produkInfo.getIdProduk();
        }
    }
    return -1; 
}

    
    
    
    private void cmb_statusLaundryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_statusLaundryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_statusLaundryActionPerformed

    private void cmb_tunaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_tunaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_tunaiActionPerformed

    private void txt_pelangganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pelangganActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pelangganActionPerformed

    private void cmb_statusPembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_statusPembayaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_statusPembayaranActionPerformed

    private void cmb_produkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_produkActionPerformed
        // TODO add your handling code here:
        String selectedProduct = cmb_produk.getSelectedItem().toString();

        populateJenisComboBox(selectedProduct);
    }//GEN-LAST:event_cmb_produkActionPerformed

    private void cmb_jenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_jenisActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmb_jenisActionPerformed

    private void txt_jumlahFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_jumlahFocusLost
        // TODO add your handling code here:
        hargaProduk = Integer.parseInt(txt_harga.getText());
        jumlahProduk =  Integer.parseInt(txt_jumlah.getText());
        String diskonText = txt_diskon.getText().trim();
        String biayaTambahanText = txt_biaya_tambahan.getText().trim();
        biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);
        diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);

        totalHarga = jumlahProduk * hargaProduk;
        totalHarga += biayaTambahan;
        totalHarga -= diskon;
        txt_totalHarga.setText(String.valueOf(totalHarga));
    }//GEN-LAST:event_txt_jumlahFocusLost

    private void txt_jumlahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_jumlahActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_jumlahActionPerformed

    private void txt_hargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_hargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_hargaActionPerformed

    private void txt_diskonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_diskonFocusGained

    }//GEN-LAST:event_txt_diskonFocusGained

    private void txt_diskonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_diskonFocusLost
        // TODO add your handling code here:
        String diskonText = txt_diskon.getText().trim();
        String biayaTambahanText = txt_biaya_tambahan.getText().trim();
        biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);
        diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);
        totalHarga = jumlahProduk * hargaProduk;
        totalHarga += biayaTambahan;
        totalHarga -= diskon;
        txt_totalHarga.setText(String.valueOf(totalHarga));
    }//GEN-LAST:event_txt_diskonFocusLost

    private void txt_diskonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_diskonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_diskonActionPerformed

    private void txt_biaya_tambahanFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_biaya_tambahanFocusLost
        // TODO add your handling code here
        String diskonText = txt_diskon.getText().trim();
        String biayaTambahanText = txt_biaya_tambahan.getText().trim();
        biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);
        diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);
        totalHarga = jumlahProduk * hargaProduk;
        totalHarga += biayaTambahan;
        totalHarga -= diskon;
        txt_totalHarga.setText(String.valueOf(totalHarga));
    }//GEN-LAST:event_txt_biaya_tambahanFocusLost

    private void txt_biaya_tambahanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_biaya_tambahanActionPerformed
        //        // TODO add your handling code here:
    }//GEN-LAST:event_txt_biaya_tambahanActionPerformed

    private void txt_totalHargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalHargaActionPerformed

    }//GEN-LAST:event_txt_totalHargaActionPerformed

    private void btn_delete_detailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delete_detailActionPerformed
        // TODO add your handling code here:
     
        if (idEdit != 0) {
            int selectedRow = modelTable.getSelectedRow();
            DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

        //    System.out.println("modelTable: "+modelTable.getSelectedRow()); // result = 0
        //    System.out.println("tableModel: "+tableModel.getRowCount());

            if (selectedRow != -1 && selectedRow < tableModel.getRowCount()) {
                try {
                    System.out.println("running delete transaksi");
                    
                    // Get the value of the "NO" column from the selected row
                    int no_transaksi = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("no").getModelIndex()).toString());
                    System.out.println("no_transaksi to be deleted: " + no_transaksi);
                    System.out.println("idEdit to be deleted: " + idEdit);

                    // Display a confirmation dialog
                    int confirmDialogResult = JOptionPane.showConfirmDialog(null, "Do you really want to delete this row?", "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (confirmDialogResult == JOptionPane.YES_OPTION) {
                        String deleteDetailSql = "DELETE FROM detail_transaksi WHERE no_transaksi = ? AND detailId = ?";
                        Connection conn = koneksi.configDB();
                        PreparedStatement pstdeleteDetailSql = conn.prepareStatement(deleteDetailSql);

                        // Set the values for the placeholders in the SQL query
                        pstdeleteDetailSql.setInt(1, idEdit);
                        pstdeleteDetailSql.setInt(2, no_transaksi);

                        // Execute the SQL query
                        int rowsAffected = pstdeleteDetailSql.executeUpdate();

                        if (rowsAffected > 0) {
                            System.out.println("Row deleted successfully");
                            deleteSelectedRow();
                        } else {
                            System.out.println("No rows deleted");
                        }
                    } else {
                        System.out.println("Deletion canceled by user");
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error deleting row from database: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Tolong pilih barisan di table yang ingin dihapus.");
            }
        } else {
            // If idEdit is 0, call deleteSelectedRow() directly
            deleteSelectedRow();
        }
    }//GEN-LAST:event_btn_delete_detailActionPerformed

    private void btn_tambahTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tambahTableActionPerformed
        // TODO add your handling code here:
        addToTable();
    }//GEN-LAST:event_btn_tambahTableActionPerformed

    private void cmb_memberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_memberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_memberActionPerformed

    private void txt_diskon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_diskon2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_diskon2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cmb_produk.setSelectedIndex(0);
        cmb_jenis.removeAllItems();
        txt_jumlah.setText(null);
        txt_harga.setText(null);
        txt_diskon.setText(null);
        txt_biaya_tambahan.setText(null);
        txt_totalHarga.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ck_pengirimanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ck_pengirimanActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_ck_pengirimanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formTransaksi().setVisible(true);
            }
        });
    }    
    
    /* private variabel */
    private int diskon = 0;
    private int biayaTambahan = 0;
    private int jumlahProduk;
    private int hargaProduk;
    private int totalHarga;
    public static int GrandTotal;
    public static int TotalPembayaran;
    public static int Kembalian;
    public static int Pembayaran;
    public static int TotalGrandTotal;
    public static int TotalBiayaTambahan;
    public static int TotalDiskon;
//    public static int Tpemba;
//    public static int Pemba;
    
    /* array */
    private ArrayList<Vector<Object>> data = new ArrayList<>();
    
    /* array yang akan dilempar */ 
    private static ArrayList<Integer> totalGrandTotalList = new ArrayList<>();
    private static ArrayList<Integer> totalDiskon = new ArrayList<>();
//    private static ArrayList<Integer> totalPembayaranTamabahan  = new ArrayList<>();
    
    private void addToTable() {
         // Deklarasi
        try {
            int detailId = modelTable.getRowCount() + 1;
            String namaProduk = cmb_produk.getSelectedItem().toString();
            String jenisProduk = cmb_jenis.getSelectedItem().toString();
            jumlahProduk = Integer.parseInt(txt_jumlah.getText());

            hargaProduk = Integer.parseInt(txt_harga.getText());
            
            // Parse and handle diskon input
            String diskonText = txt_diskon.getText().trim();
            diskon = diskonText.isEmpty() ? 0 : Integer.parseInt(diskonText);

            // Parse and handle biayaTambahan input
            String biayaTambahanText = txt_biaya_tambahan.getText().trim();
            biayaTambahan = biayaTambahanText.isEmpty() ? 0 : Integer.parseInt(biayaTambahanText);

            /*   Rumus    */
            totalHarga = jumlahProduk * hargaProduk;
            totalHarga += biayaTambahan;
            totalHarga -= diskon;
            
            System.out.println("Total Harga: " + totalHarga);
            txt_totalHarga.setText(String.valueOf(totalHarga));
           
             /*   Table add row     */
            DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

            Vector<Object> row = new Vector<>();
            row.add(detailId);
            row.add(namaProduk);
            row.add(jenisProduk);
            row.add(jumlahProduk);
            row.add(hargaProduk);
            row.add(biayaTambahan);
            row.add(diskon);
            row.add(totalHarga);

            tableModel.addRow(row);

            /* grand total */
            int gtotal = jumlahProduk * hargaProduk;

            // nilai grand total
            TotalGrandTotal += gtotal;
            txt_grandTotal.setText(String.valueOf(TotalGrandTotal));

            // total nilai biaya tambahan
            if (!txt_biaya_tambahan.getText().trim().isEmpty()) {
//                int biayaTambahanValue = Integer.parseInt(txt_biaya_tambahan.getText().trim());
//                TotalBiayaTambahan += biayaTambahanValue;
                    TotalBiayaTambahan += biayaTambahan;
                txt_biaya_tambahan2.setText(String.valueOf(TotalBiayaTambahan));
            }

            // total nilai diskon ERROR
            if (!txt_diskon.getText().trim().isEmpty()) {
//                int diskonValue = Integer.parseInt(txt_diskon.getText().trim());
                TotalDiskon += diskon;
                txt_diskon2.setText(String.valueOf(TotalDiskon));
            }

            // total Pembayaran
            TotalPembayaran = countNumbersInColumn("Total Harga");
            txt_totalPembayaran.setText(String.valueOf(TotalPembayaran));

            // Pembayaran
            Pembayaran = txt_pembayaran.getText().trim().isEmpty() ? 0 : Integer.parseInt(txt_pembayaran.getText().trim());
            txt_pembayaran.setText(String.valueOf(Pembayaran));

            // Kembalian
            Kembalian = Pembayaran - TotalPembayaran;
            txt_kembalian.setText(String.valueOf(Kembalian));
            
            data.add(row);
            System.out.println("Data size after adding a row: " + data.size());
            System.out.println("Row added to data: " + row);
            
             // TODO add your handling code here:
//        cmb_produk.setSelectedIndex(0);
//        cmb_jenis.removeAllItems();
//        txt_jumlah.setText(null);
//        txt_harga.setText(null);
//        txt_diskon.setText(null);
//        txt_biaya_tambahan.setText(null);
//        txt_totalHarga.setText(null);

        } catch (NumberFormatException e) {
            // Log the exception details
            System.err.println("Error parsing integer:");
            e.printStackTrace();

            // Show a dialog with a specific error message
            JOptionPane.showMessageDialog(null, "Invalid input. Please enter valid numeric values.");
        }   
    }
     
//    private void addToDatabase(String idTrans) {
//        for (Vector<Object> row : data) {
//            int detailId = (int) row.get(0);
//            String namaProduk = (String) row.get(1);
//            String jenisProduk = (String) row.get(2);
//            int jumlah = (int) row.get(3);
//            int harga = (int) row.get(4);
//            int biayaTambahan = (int) row.get(5);
//            int diskon = (int) row.get(6);
//            int totalHarga = (int) row.get(7);
//
//            try {
//                String sqlQuery = "INSERT INTO detail_transaksi (no_transaksi, nama_produk, jenis_produk, jumlah, harga, biaya_tambahan, diskon, total_harga) " +
//                        "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
//                System.out.println(sqlQuery);
//
//                java.sql.Connection conn=(Connection)koneksi.configDB();
//                java.sql.PreparedStatement pst=conn.prepareStatement(sqlQuery);
//
//                // Set values using parameters to avoid SQL injection
//                pst.setString(1, idTrans);
//                pst.setString(2, namaProduk);
//                pst.setString(3, jenisProduk);
//                pst.setInt(4, jumlah);
//                pst.setInt(5, harga);
//                pst.setInt(6, biayaTambahan);
//                pst.setInt(7, diskon);
//                pst.setInt(8, totalHarga);
//
//                // Execute the query
//                pst.execute();
//                
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(this, e.getMessage());
//            }
//        }
//    }

    private int countNumbersInColumn(String columnName) {       
        int totalCount = 0;    
        DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

        int columnIndex = -1;
        for (int i = 0; i < tableModel.getColumnCount(); i++) {
            if (tableModel.getColumnName(i).trim().equals(columnName)) {
                columnIndex = i;
                break;
            }
        }

        if (columnIndex != -1) {
            // Iterate through rows and sum up the numbers in the specified column
            for (int row = 0; row < tableModel.getRowCount(); row++) {
                Object value = tableModel.getValueAt(row, columnIndex);

                if (value instanceof Number) {
                    totalCount += ((Number) value).intValue();
                }
            }

            System.out.println("Total Count in column " + columnName + ": " + totalCount);
        } else {
            System.out.println("Column not found: " + columnName);
        }  
        return totalCount;
    }
    
    private void deleteSelectedRow() {
        int selectedRow = modelTable.getSelectedRow();
        DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();

        if (selectedRow != -1 && selectedRow < tableModel.getRowCount()) {
            
            // Retrieve values from the removed row
            int dkgrand = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Total Harga").getModelIndex()).toString());
            int djumlah = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Jumlah").getModelIndex()).toString());
            int dharga = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Harga").getModelIndex()).toString());
            int dtambahan = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Tambahan").getModelIndex()).toString());
            int ddiskon = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Diskon").getModelIndex()).toString());

            // Update totalPembayaran and txt_totalPembayaran
            int totalPembayaran = countNumbersInColumn("Total Harga");
            TotalPembayaran = totalPembayaran - dkgrand;
            txt_totalPembayaran.setText(String.valueOf(TotalPembayaran));

            // Update ktotal and rgrand
            int ktotal = djumlah * dharga;
            int rgrand = TotalGrandTotal - ktotal;
            TotalGrandTotal -= ktotal;  // Subtract ktotal from TotalGrandTotal
            txt_grandTotal.setText(String.valueOf(rgrand));
            
            
            TotalBiayaTambahan -= dtambahan;
            txt_biaya_tambahan2.setText(String.valueOf(TotalBiayaTambahan));
            
            TotalDiskon -= ddiskon;
            txt_diskon2.setText(String.valueOf(TotalDiskon));
            
            int kembalian = Pembayaran - TotalPembayaran ;
            txt_kembalian.setText(String.valueOf(kembalian));

            // Remove the selected row from the table model
            tableModel.removeRow(selectedRow);
            
//            int detailId = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("no").getModelIndex()).toString());
            
                    // Debugging statements
                    System.out.println("tpemba:" + TotalPembayaran);
                    System.out.println("rgrand:" + rgrand);
                    System.out.println("ktotal:" + ktotal);
                } else {
                    JOptionPane.showMessageDialog(null, "Tolong pilih barisan di table yang ingin dihapus.");
                }
    }
//    private void deleteSelectedRow() {
//    int selectedRow = modelTable.getSelectedRow();
//    DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();
//
//    if (selectedRow != -1 && selectedRow < tableModel.getRowCount()) {
//        // Retrieve necessary data for deletion
//        Map<String, Object> deleteData;
//        deleteData = getEditIdData(idEdit);
//        int noTransaksi = idEdit;
//        List<Integer> idProdukList = (List<Integer>) deleteData.get("idProdukList");
//
//        // Confirm deletion with the user
//        int dialogResult = JOptionPane.showConfirmDialog(null,
//                "Are you sure you want to delete this entry?", "Confirmation", JOptionPane.YES_NO_OPTION);
//
//        if (dialogResult == JOptionPane.YES_OPTION) {
//            try {
//                Connection conn = configDB();
//
//                // Delete rows from detail_transaksi table where no_transaksi is noTransaksi and id_produk is in idProdukList
//                String deleteDetailSql = "DELETE FROM detail_transaksi WHERE no_transaksi = ? AND id_produk = ?";
//                try (PreparedStatement deleteDetailStmt = conn.prepareStatement(deleteDetailSql)) {
//                    for (int idProduk : idProdukList) {
//                        deleteDetailStmt.setInt(1, noTransaksi);
//                        deleteDetailStmt.setInt(2, idProduk);
//                        deleteDetailStmt.executeUpdate();
//                    }
//                }
//
//                // ... (existing code)
//
//                // Retrieve values from the removed row
//                int dkgrand = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Total Harga").getModelIndex()).toString());
//                int djumlah = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Jumlah").getModelIndex()).toString());
//                int dharga = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Harga").getModelIndex()).toString());
//                int dtambahan = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Tambahan").getModelIndex()).toString());
//                int ddiskon = Integer.parseInt(modelTable.getValueAt(selectedRow, modelTable.getColumn("Diskon").getModelIndex()).toString());
//
//                // Update totalPembayaran and txt_totalPembayaran
//                int totalPembayaran = countNumbersInColumn("Total Harga");
//                TotalPembayaran = totalPembayaran - dkgrand;
//                txt_totalPembayaran.setText(String.valueOf(TotalPembayaran));
//
//                // Update ktotal and rgrand
//                int ktotal = djumlah * dharga;
//                int rgrand = TotalGrandTotal - ktotal;
//                TotalGrandTotal -= ktotal;  // Subtract ktotal from TotalGrandTotal
//                txt_grandTotal.setText(String.valueOf(rgrand));
//
//                TotalBiayaTambahan -= dtambahan;
//                txt_biaya_tambahan2.setText(String.valueOf(TotalBiayaTambahan));
//
//                TotalDiskon -= ddiskon;
//                txt_diskon2.setText(String.valueOf(TotalDiskon));
//
//                int kembalian = Pembayaran - TotalPembayaran;
//                txt_kembalian.setText(String.valueOf(kembalian));
//
//                // Remove the selected row from the table model
//                tableModel.removeRow(selectedRow);
//
//                // Debugging statements
//                System.out.println("tpemba:" + TotalPembayaran);
//                System.out.println("rgrand:" + rgrand);
//                System.out.println("ktotal:" + ktotal);
//
//                JOptionPane.showMessageDialog(null, "Entry deleted successfully.");
//
//                // ... (existing code)
//
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Error deleting entry from database: " + e.getMessage());
//            }
//        } else {
//            // User canceled the deletion
//            JOptionPane.showMessageDialog(null, "Deletion canceled.");
//        }
//    } else {
//        JOptionPane.showMessageDialog(null, "Tolong pilih barisan di table yang ingin dihapus.");
//    }
//}

     
    private Map<String, ProdukInfo> produkMap = new HashMap<>();

    private void populateProdukSelectBox() {
        try {
            String sql = "SELECT id_produk, nama_produk FROM produk";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
            java.sql.ResultSet rs = pst.executeQuery();

            // Clear existing items and reset the produkMap
    //        cmb_produk.removeAllItems();
            produkMap.clear();

            while (rs.next()) {
                int idProduk = rs.getInt("id_produk");
                String productName = rs.getString("nama_produk");

                // Create a new ProdukInfo instance
                ProdukInfo produkInfo = new ProdukInfo(idProduk, productName);

                // Store the association in the produkMap
                produkMap.put(productName, produkInfo);

                cmb_produk.addItem(productName);
//                System.out.println("Added product: " + produkInfo);
            }

            rs.close();
            pst.close();
            conn.close();
            
             

            // Print the contents of the produkMap
//            System.out.println("Produk Map:");
            for (Map.Entry<String, ProdukInfo> entry : produkMap.entrySet()) {
                ProdukInfo produkInfo = entry.getValue();
//                System.out.println("Product: " + entry.getKey() + ", Info: " + produkInfo + ", idProduk: " + produkInfo.getIdProduk());
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }



   private void populateJenisComboBox(String selectedProduct) {
    try {
        ProdukInfo selectedProdukInfo = produkMap.get(selectedProduct);

        if (selectedProdukInfo != null) {
            String sql = "SELECT jenis_produk, Harga_produk FROM produk WHERE id_produk = ?";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);

            pst.setInt(1, selectedProdukInfo.getIdProduk());

            java.sql.ResultSet rs = pst.executeQuery();

            cmb_jenis.removeAllItems();

//            int selectedIndex = cmb_produk.getSelectedIndex();
//            if (selectedIndex == "") {
////                System.out.println("Adding Default Jenis");
//                // Handle default selection differently
//                cmb_jenis.addItem("Default Jenis"); // Add a default jenis item
//                txt_harga.setText(null); // Set a default harga
//            } else {
                while (rs.next()) {
                    String jenisProduk = rs.getString("jenis_produk");
                    hargaProduk = rs.getInt("Harga_produk");
                    cmb_jenis.addItem(jenisProduk);
                    txt_harga.setText(String.valueOf(hargaProduk));
                }
//            }

                rs.close();
                pst.close();
                conn.close();
                
                
               
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }


    public static class ProdukInfo {
        private final int idProduk;
        private final String namaProduk;

        public ProdukInfo(int idProduk, String namaProduk) {
            this.idProduk = idProduk;
            this.namaProduk = namaProduk;
        }

        public int getIdProduk() {
            return idProduk;
        }

        public String getNamaProduk() {
            return namaProduk;
        }

        @Override
        public String toString() {
            return "ProdukInfo{id=" + idProduk + ", nama='" + namaProduk + "'}";
        }
    }
    
    private void hargaSet(int hargaItem) {
        try {
            String sql = "SELECT jenis_produk FROM produk WHERE nama_produk = ?";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
            java.sql.ResultSet rs = pst.executeQuery();

            txt_harga.setText(null);

            while (rs.next()) {
                String jenisProduk = rs.getString("jenis_produk");
                txt_harga.setText(jenisProduk);
            }
            rs.close();
            pst.close();
            conn.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    private Map<String, Integer> memberMap = new HashMap<>();

    private void populatedCmbMember() {
        try {
            String sql = "SELECT id_member, nama, alamat, no_hp FROM `member` ";
            java.sql.Connection conn = (Connection) koneksi.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);

            java.sql.ResultSet rs = pst.executeQuery();

//            cmb_member.removeAllItems();
            memberMap.clear();
//            txt_pelanggan.setText(null);

            while (rs.next()) {
                int id_member = rs.getInt("id_member");
                String namaMember = rs.getString("nama");
                cmb_member.addItem(namaMember);

                memberMap.put(namaMember, id_member);
            }

            rs.close();
            pst.close();
            conn.close();

            cmb_member.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int selectedIndex = cmb_member.getSelectedIndex();
                    if (selectedIndex == 0) {
                        txt_pelanggan.setText(null);
                        txt_hp.setText(null);
                        txt_alamat.setText(null);
                    } else {
                        String selectedMember = cmb_member.getSelectedItem().toString();
                        Integer selectedIdMember = memberMap.get(selectedMember);
                        
                        String noHp = getNoHpForSelectedMember(selectedIdMember);
                        String alamat = getAlamatForSelectedMember(selectedIdMember);

                        System.out.println("Selected member: " + selectedMember + ", id_member: " + selectedIdMember);
                        txt_pelanggan.setText(selectedMember);
                        txt_hp.setText(noHp);
                        txt_alamat.setText(alamat);

                    }
                }
            });

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private String getNoHpForSelectedMember(Integer idMember) {
        try {
            if (idMember != null) {
                String sql = "SELECT no_hp FROM `member` WHERE id_member = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setInt(1, idMember);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("no_hp");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return null;
    }
    
    private String getAlamatForSelectedMember(Integer idMember) {
        try {
            if (idMember != null) {
                String sql = "SELECT alamat FROM `member` WHERE id_member = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setInt(1, idMember);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("alamat");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return null;
    }

//    private String getPelangganForDelete(Integer idTransaksi) {
//        try {
//            if (idTransaksi != null) {
//                String sql = "SELECT id_pelanggan FROM `transaksi` WHERE no_transaksi = ?";
//                java.sql.Connection conn = (Connection) koneksi.configDB();
//                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
//
//                pst.setInt(1, idTransaksi);
//
//                java.sql.ResultSet rs = pst.executeQuery();
//
//                if (rs.next()) {
//                    return rs.getString("id_pelanggan");
//                }
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, e.getMessage());
//        }
//        return null;
//    }
    
    private void getEditIdData(int idEdit) {
        
//        Map<String, Object> dataMap = new HashMap<>();
        
        if (idEdit != -1) { // Assuming -1 indicates no valid idEdit
            try {
                String idPelanggan = getPelangganID(idEdit) ;
                // Fetch existing data from the database based on idEdit
                String fetchPelangganQuery = "SELECT nama, no_hp FROM pelanggan WHERE id_pelanggan =?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                try (PreparedStatement pstFetchPelanggan = conn.prepareStatement(fetchPelangganQuery)) {
                     pstFetchPelanggan.setInt(1, Integer.parseInt(idPelanggan));
                    try (ResultSet rsPelanggan = pstFetchPelanggan.executeQuery()) {
                        if (rsPelanggan.next()) {
                            // Set the existing data in your text inputs
                            txt_pelanggan.setText(rsPelanggan.getString("nama"));
                            txt_hp.setText(rsPelanggan.getString("no_hp"));
                        }
                    }
                }

                // Fetch existing data from the transaksi table
                String fetchTransaksiQuery = "SELECT * FROM transaksi WHERE no_transaksi=?";
                try (PreparedStatement pstFetchTransaksi = conn.prepareStatement(fetchTransaksiQuery)) {
                    pstFetchTransaksi.setInt(1, idEdit);
                    try (ResultSet rsTransaksi = pstFetchTransaksi.executeQuery()) {
                        if (rsTransaksi.next()) {
                            // Set the existing data in your combo boxes and other UI components
                            cmb_tunai.setSelectedItem(rsTransaksi.getString("dibayar_secara"));
                             // perbaikan
//                            cmb_statusLaundry.setSelectedItem(rsTransaksi.getString("status_laundry"));
                            
                            cmb_statusPembayaran.setSelectedItem(rsTransaksi.getString("status_pembayaran"));
                            // Set other UI components...
                            if (rsTransaksi.getInt("statusPengiriman") != 0) {
                                ck_pengiriman.setSelected(true);                         
                            } else {
                                ck_pengiriman.setSelected(false);                         
                            }
                            txt_grandTotal.setText(rsTransaksi.getString("grandTotal"));
                            txt_biaya_tambahan2.setText(rsTransaksi.getString("biayaTambahan"));
                            txt_diskon2.setText(rsTransaksi.getString("diskon"));
                            txt_totalPembayaran.setText(rsTransaksi.getString("totalPembayaran"));
                            txt_pembayaran.setText(rsTransaksi.getString("pembayaran"));
                            txt_kembalian.setText(rsTransaksi.getString("kembalian"));
//                            txt_tgl.setValue(rsTransaksi.getDate("tanggal_masuk"));
                            txt_batasWaktu.setValue(rsTransaksi.getDate("batas_waktu"));
                            txt_alamat.setText(rsTransaksi.getString("alamat_pengiriman"));
                            
                            int kembalian1 = TotalPembayaran + Pembayaran;
                            int kembalian = Pembayaran - kembalian1 ;
//                            Kembalian = Pembayaran - TotalPembayaran;
                            
                            TotalGrandTotal = Integer.parseInt(rsTransaksi.getString("grandTotal"));
                            TotalPembayaran = Integer.parseInt(rsTransaksi.getString("totalPembayaran"));
//                            Kembalian = Integer.parseInt(rsTransaksi.getString("kembalian"));
                            Kembalian = kembalian;
                            Pembayaran = Integer.parseInt(rsTransaksi.getString("pembayaran"));
                            TotalBiayaTambahan = Integer.parseInt(rsTransaksi.getString("biayaTambahan"));
                            TotalDiskon = Integer.parseInt(rsTransaksi.getString("diskon"));
                        }
                    }
                }

//                // Fetch existing data from the detail_transaksi table
//                String fetchDetailTransaksiQuery = "SELECT * FROM detail_transaksi WHERE no_transaksi=?";
//                try (PreparedStatement pstFetchDetailTransaksi = conn.prepareStatement(fetchDetailTransaksiQuery)) {
//                    pstFetchDetailTransaksi.setInt(1, idEdit);
//                    try (ResultSet rsDetailTransaksi = pstFetchDetailTransaksi.executeQuery()) {
//                        // Clear existing data in your data vector
//                        data.clear();
////                        List idProdukList = new ArrayList();
//
//                        while (rsDetailTransaksi.next()) {
//                            // Populate your data vector with existing data
////                            idProdukList.add(rsDetailTransaksi.getInt("id_produk"));
//                            
//                            // change of plane row first add detailTransaksi id row so when delete iddetail and idtransaksi
//                            Vector<Object> row = new Vector<>();
//                            rsDetailTransaksi.getInt("id_produk");
//                            // Retrieve data from the result set and add it to the row vector
//                            row.add(rsDetailTransaksi.getInt("detailId"));
//                            row.add("ProductName"); // Replace with logic to retrieve product name based on id_produk
//                            row.add("JenisProduk"); // Replace with logic to retrieve jenis produk based on id_produk
//                            row.add(rsDetailTransaksi.getInt("jumlah"));
//                            row.add(rsDetailTransaksi.getInt("harga"));
//                            row.add(rsDetailTransaksi.getInt("biayaTambahan"));
//                            row.add(rsDetailTransaksi.getInt("diskon"));
//                            row.add(rsDetailTransaksi.getInt("totalHarga"));
//                            // Add the row vector to your data vector
//                            data.add(row);
//                        }
////                        dataMap.put("idProdukList", idProdukList);
//                    }
//                }
                    // Fetch existing data from the detail_transaksi table
                    String fetchDetailTransaksiQuery = "SELECT * FROM detail_transaksi WHERE no_transaksi=?";
                    try (PreparedStatement pstFetchDetailTransaksi = conn.prepareStatement(fetchDetailTransaksiQuery)) {
                        pstFetchDetailTransaksi.setInt(1, idEdit);
                        try (ResultSet rsDetailTransaksi = pstFetchDetailTransaksi.executeQuery()) {
                            // Clear existing data in your data vector
                            data.clear();

                            while (rsDetailTransaksi.next()) {
                                // Retrieve id_produk from the current row
                                int idProduk = rsDetailTransaksi.getInt("id_produk");

                                // Fetch additional details from the 'produk' table based on id_produk
                                String fetchProdukDetailsQuery = "SELECT nama_produk, jenis_produk FROM produk WHERE id_produk=?";
                                try (PreparedStatement pstFetchProdukDetails = conn.prepareStatement(fetchProdukDetailsQuery)) {
                                    pstFetchProdukDetails.setInt(1, idProduk);
                                    try (ResultSet rsProdukDetails = pstFetchProdukDetails.executeQuery()) {
                                        if (rsProdukDetails.next()) {
                                            // Change the logic to retrieve actual data from the result set
                                            String jenisProduk = rsProdukDetails.getString("jenis_produk");
                                            String productName = rsProdukDetails.getString("nama_produk");

                                            // Populate your data vector with existing data and additional details
                                            Vector<Object> row = new Vector<>();
                                            row.add(rsDetailTransaksi.getInt("detailId"));
                                            row.add(productName);
                                            row.add(jenisProduk);
                                            row.add(rsDetailTransaksi.getInt("jumlah"));
                                            row.add(rsDetailTransaksi.getInt("harga"));
                                            row.add(rsDetailTransaksi.getInt("biayaTambahan"));
                                            row.add(rsDetailTransaksi.getInt("diskon"));
                                            row.add(rsDetailTransaksi.getInt("totalHarga"));
                                            // Add the row vector to your data vector
                                            data.add(row);
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace(); // Handle SQLException appropriately
                    }

                
//                String fetchDetailTransaksiQuery = "SELECT id_produk FROM detail_transaksi WHERE no_transaksi=?";
//                try (PreparedStatement pstFetchDetailTransaksi = conn.prepareStatement(fetchDetailTransaksiQuery)) {
//                    pstFetchDetailTransaksi.setInt(1, idEdit);
//                    try (ResultSet rsDetailTransaksi = pstFetchDetailTransaksi.executeQuery()) {
//                        List<Integer> idProdukList = new ArrayList<>();
//
//                        while (rsDetailTransaksi.next()) {
//                            // Add id_produk values to the list
//                            idProdukList.add(rsDetailTransaksi.getInt("id_produk"));
//                        }
//
//                        // Populate dataMap with necessary information for deletion
//                        dataMap.put("idPelanggan", idPelanggan); // Assuming idPelanggan is a string
//                        dataMap.put("noTransaksi", idEdit); // Assuming idEdit is the no_transaksi value
//                        dataMap.put("idProdukList", idProdukList);
//                    }
//                }

                // Update your UI components with the refreshed data
                // For example, update your JTable if you are using one
                DefaultTableModel tableModel = (DefaultTableModel) modelTable.getModel();
                tableModel.setRowCount(0); // Clear existing data in the table

                for (Vector<Object> row : data) {
                    tableModel.addRow(row); // Add each row from the refreshed data
                }

                // Notify the table that the data has changed
                tableModel.fireTableDataChanged();
                
            } catch (Exception e) {
                e.printStackTrace(); 
            }
        }
    }
    
    private String getPelangganID(Integer idTransaksi) {
        try {
            if (idTransaksi != null) {
                String sql = "SELECT id_pelanggan FROM `transaksi` WHERE no_transaksi = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setInt(1, idTransaksi);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("id_pelanggan");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return null;
    }
    
    private String getStatusLaundry(Integer idTransaksi) {
        try {
            if (idTransaksi != null) {
                String sql = "SELECT status_laundry FROM `transaksi` WHERE no_transaksi = ?";
                java.sql.Connection conn = (Connection) koneksi.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);

                pst.setInt(1, idTransaksi);

                java.sql.ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    return rs.getString("status_laundry");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete_detail;
    private javax.swing.JButton btn_kembali;
    private javax.swing.JButton btn_simpan;
    private javax.swing.JButton btn_tambahTable;
    private javax.swing.JRadioButton ck_pengiriman;
    private javax.swing.JComboBox<String> cmb_jenis;
    private javax.swing.JComboBox<String> cmb_member;
    private javax.swing.JComboBox<String> cmb_produk;
    private javax.swing.JComboBox<String> cmb_statusLaundry;
    private javax.swing.JComboBox<String> cmb_statusPembayaran;
    private javax.swing.JComboBox<String> cmb_tunai;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable modelTable;
    private javax.swing.JTextArea txt_alamat;
    private javax.swing.JSpinner txt_batasWaktu;
    private javax.swing.JTextField txt_biaya_tambahan;
    private javax.swing.JTextField txt_biaya_tambahan2;
    private javax.swing.JTextField txt_diskon;
    private javax.swing.JTextField txt_diskon2;
    private javax.swing.JTextField txt_grandTotal;
    private javax.swing.JTextField txt_harga;
    private javax.swing.JTextField txt_hp;
    private javax.swing.JTextField txt_jumlah;
    private javax.swing.JTextField txt_kembalian;
    private javax.swing.JTextField txt_pelanggan;
    private javax.swing.JTextField txt_pembayaran;
    private javax.swing.JTextField txt_totalHarga;
    private javax.swing.JTextField txt_totalPembayaran;
    // End of variables declaration//GEN-END:variables
}